version: "3.8"

services:
  # ===== MESSAGE QUEUE LAYER =====
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - tracing-net

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test:
        ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - tracing-net

  # ===== STORAGE LAYER =====
  clickhouse:
    image: clickhouse/clickhouse-server:23.8
    container_name: clickhouse
    ports:
      - "8123:8123"
      - "9000:9000"
    environment:
      CLICKHOUSE_DB: traces
      CLICKHOUSE_USER: admin
      CLICKHOUSE_PASSWORD: password
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    volumes:
      - ./clickhouse-init:/docker-entrypoint-initdb.d
      - clickhouse_data:/var/lib/clickhouse
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:8123/ping || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - tracing-net

  # ===== CORRELATION SERVICE =====
  redis:
    image: redis:7-alpine
    container_name: redis-correlation
    ports:
      - "6379:6379"
    networks:
      - tracing-net

  # ===== OTEL COLLECTORS =====
  otel-collector-iad:
    image: otel/opentelemetry-collector-contrib:0.89.0
    container_name: otel-collector-iad
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./collector-template.yml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
      - "8889:8889" # Metrics
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - REGION=iad1
      - KAFKA_TOPIC=traces-iad1
      - SERVICE_INSTANCE_ID=iad1-collector
    networks:
      - tracing-net

  otel-collector-sfo:
    image: otel/opentelemetry-collector-contrib:0.89.0
    container_name: otel-collector-sfo
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./collector-template.yml:/etc/otel-collector-config.yaml
    ports:
      - "4319:4317" # OTLP gRPC
      - "4320:4318" # OTLP HTTP
      - "8890:8889" # Metrics
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - REGION=sfo1
      - KAFKA_TOPIC=traces-sfo1
      - SERVICE_INSTANCE_ID=sfo1-collector
    networks:
      - tracing-net

  # ===== TRACE PROCESSOR =====
  trace-processor:
    image: node:18-alpine
    container_name: trace-processor
    working_dir: /app
    volumes:
      - ./trace-processor-enhanced.js:/app/index.js
      - ./package.json:/app/package.json
    command: sh -c "npm install && node index.js"
    depends_on:
      kafka:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    environment:
      - KAFKA_BROKER=kafka:29092
      - CLICKHOUSE_HOST=clickhouse
      - CLICKHOUSE_PORT=8123
      - CLICKHOUSE_USER=admin
      - CLICKHOUSE_PASSWORD=password
    networks:
      - tracing-net

  # ===== APPLICATION SIMULATORS =====
  app-simulator:
    image: alpine:latest
    container_name: app-simulator
    volumes:
      - ./app-simulator.sh:/app-simulator.sh
    command: sh -c "apk add --no-cache curl bc openssl && sh /app-simulator.sh"
    depends_on:
      - otel-collector-iad
      - otel-collector-sfo
    networks:
      - tracing-net
    restart: unless-stopped

  # ===== VISUALIZATION =====
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: jaeger
    ports:
      - "16686:16686" # Jaeger UI
      - "14268:14268" # HTTP collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - tracing-net

  # ===== MONITORING =====
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - tracing-net

  grafana:
    image: grafana/grafana:10.2.0
    container_name: grafana
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clickhouse-datasource 4.0.0
    volumes:
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/dashboards/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
    networks:
      - tracing-net

volumes:
  clickhouse_data:

networks:
  tracing-net:
    driver: bridge
